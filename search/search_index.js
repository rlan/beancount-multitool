var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":""},{"location":"index.html#what-is-it","title":"What is it?","text":"<p>Beancount Multitool is a collection of tools for the end users of Beancount. Currenly, the entry point is a command-line-interface (CLI) tool that converts financial data from financial institutions to Beancount files.</p>"},{"location":"index.html#why-do-i-want-it","title":"Why do I want it?","text":"<p>There is no importers for Japan financial institutions on Beancount's contribution list. So I created this tool. Here is a list of supported financial institutions.</p> <p>The target audience is someone who is quite hands-on with their tools, in the same way a Beancount user is.</p>"},{"location":"index.html#what-is-it-good-for","title":"What is it good for?","text":"<ul> <li>The CLI tool saves the user from typing transaction from statements. The tool reads the raw CSV files downloaded from supported financial institutions. It converts the transactions in a CSV file to an importable Beancount file.<ul> <li>For example, it can label all debit transactions as <code>Expenses:JP:Unknown:NameOfInstitution</code>.</li> <li>and all credit transaction as <code>Income:JP:Unknown:NameOfInstitution</code>.</li> </ul> </li> <li>The CLI tool uses regular expressions to find recurring expenses. Once found, they are labeled by user-defined account, e.g. <code>Expenses:JP:Food:Grocery</code> or <code>Expenses:JP:Food:Restaurant</code>, user-defined tags and user-defined (Beancount) flag.</li> <li>Outgoing money transfers can be found via regular expressions and can be labeled with a reserved tag <code>#reconcile</code>. Additional metadata is injected to help linking with receiving transaction.</li> </ul>"},{"location":"index.html#what-is-it-not-good-for","title":"What is it not good for?","text":"<ul> <li>The regular expressions are manually added and maintained by the user. The CLI tool does not make predictions from them. In other words, there is no machine learning.</li> <li>The regular expressions identifies potentional duplicates via reserved tags. However, these duplicate transactions for a money transfer between two bank accounts will be in the converted Beancount files. The CLI tool does not automatically reconcile them. Same as Beancount, the user is expected to do so.</li> </ul>"},{"location":"index.html#what-is-it-not-yet-good-for","title":"What is it not yet good for?","text":"<ul> <li>The tool supports only transactions with one source account and one target account. It does not support splitting expenses as described in Beancount's documentation. For example, if there is a hotel bill that combines lodging, food and entertainment costs in one charge, this tool can not help with splitting that expense into three different expense accounts. Workaround: manually edit the Beancount file after conversion.</li> <li>The tool does not support transactions with currency exchanges.</li> </ul>"},{"location":"index.html#what-does-success-look-like-for-this-project","title":"What does success look like for this project?","text":"<p>If I can only list 3 requirements:</p> <ol> <li>Data ingest. I plan to query my ledger like a database. The financial data files must be ingested correctly.</li> <li>Reusability. Every month, I import data from 10+ accounts.</li> <li>Automated tests. As I add more importers and features, I will break things. Automated tests helps with shipping working code.</li> </ol>"},{"location":"index.html#what-are-the-innovations","title":"What are the innovations?","text":"<ul> <li>Parsing the CSV file from each financial instituation to standard data structure, Pandas Dataframe.</li> <li>Reserved words in tags injects additional metadata to a Beancount transaction.<ul> <li>I didn't do a survey of tools out there, just a gut feeling.</li> </ul> </li> </ul>"},{"location":"thank_you.html","title":"Thank you","text":"<p>This project is not possible without the people behind the various tools on my tech stack.</p> <ul> <li>The financial institutions which make data available via CSV files.</li> <li>Beancount for plain-text accounting.</li> <li>GitHub for hosting source code, CI/CD and documentation.</li> <li>PyPI for hosting releases.</li> <li>Various Python tools: click, pandas, pipx, poetry, pyenv, pytest, pytest-cov, ruff.</li> <li>Material for MkDocs for writing documentation.</li> <li>Visual Studio Code for the IDE.</li> <li>Homebrew for the package manager.</li> <li>Jupyter Lab for experimentation.</li> </ul> <p>I'm sure there are other tools I forgot to mention :)</p>"},{"location":"getting-started/index.html","title":"Getting Started","text":""},{"location":"getting-started/index.html#prerequisites","title":"Prerequisites","text":"<p>Python 3.9, 3.10, 3.11, 3.12 or 3.13.</p> <p>All of these versions are tested via CI/CD. Due to use of removeprefix(), not compatible with previous versions of Python.</p>"},{"location":"getting-started/index.html#installation","title":"Installation","text":"<p>First, install pipx (not pip):</p> <p>Then:</p> <pre><code>pipx install beancount-multitool\n</code></pre>"},{"location":"getting-started/index.html#try-it-out","title":"Try it out!","text":"<p>Let's see if installation was successful:</p> <pre><code>bean-mt --help\n</code></pre> <pre><code>Usage: bean-mt [OPTIONS] NAME CONFIG DATA\n\n  Read financial data and output a Beancount file.\n\n  NAME is the name of the financial institution. See Note below for a list of\n  supported names.\n\n  CONFIG is a .toml file with run-time configurations, e.g. config.toml.\n\n  DATA is the raw financial data downloaded from NAME, e.g. input.csv.\n\nOptions:\n  --output PATH  Resulting Beancount file\n  --version      Show the version and exit.\n  --help         Show this message and exit.\n\n  Note: supported financial institutions are ['ja_bank', 'rakuten_bank',\n  'rakuten_card', 'shinsei_bank', 'sumishin_net_bank']\n</code></pre>"},{"location":"getting-started/index.html#update-to-a-new-version","title":"Update to a new version","text":"<pre><code>pipx upgrade beancount-multitool\n</code></pre>"},{"location":"getting-started/index.html#uninstallation","title":"Uninstallation","text":"<pre><code>pipx uninstall beancount-multitool\n</code></pre>"},{"location":"institutions/index.html","title":"Supported institutions","text":"<p>Here is a list of financial institutions whose CSV files the CLI tool can read:</p> <p>Japan</p> <ul> <li>JA Bank \uff2a\uff21\u30cd\u30c3\u30c8\u30d0\u30f3\u30af</li> <li>Rakuten Bank \u697d\u5929\u9280\u884c</li> <li>Rakuten Card \u697d\u5929\u30ab\u30fc\u30c9</li> <li>SBI Shinsei Bank \u65b0\u751f\u9280\u884c</li> <li>SBI Sumishin Net Bank \u4f4f\u4fe1SBI\u30cd\u30c3\u30c8\u9280\u884c</li> </ul> <p>USA</p> <ul> <li>Chase Sapphire Preferred Card</li> </ul>"},{"location":"institutions/chase_sp_card.html","title":"Chase Sappire Preferred VISA Card","text":"<p>https://www.chase.com/</p>"},{"location":"institutions/chase_sp_card.html#how-to-download-transactions","title":"How to download transactions","text":"<p>TODO</p>"},{"location":"institutions/chase_sp_card.html#csv-file","title":"CSV file","text":"<p>Header row:</p> <pre><code>Transaction Date,Post Date,Description,Category,Type,Amount,Memo\n</code></pre>"},{"location":"institutions/chase_sp_card.html#regular-expressions","title":"Regular expressions","text":"<p>Regular expressions uses <code>Description</code> for matching.</p>"},{"location":"institutions/chase_sp_card.html#example-label-all-transactions-as-default","title":"Example: label all transactions as default","text":"<p>One of the automated tests does exactly this. Let's download and run it locally.</p> <pre><code>wget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/chase_sp_card/config.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/chase_sp_card/credit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/chase_sp_card/debit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/chase_sp_card/test.bean\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/chase_sp_card/test.csv\nbean-mt chase_sp_card config.toml test.csv --output out.bean\n</code></pre>"},{"location":"institutions/ja_bank.html","title":"JA Bank \uff2a\uff21\u30cd\u30c3\u30c8\u30d0\u30f3\u30af","text":"<p>https://www.jabank.jp/</p>"},{"location":"institutions/ja_bank.html#how-to-download-transactions","title":"How to download transactions","text":"<p>TODO</p>"},{"location":"institutions/ja_bank.html#csv-file","title":"CSV file","text":"<p>Header row:</p> <pre><code>\"\u756a\u53f7\",\"\u660e\u7d30\u533a\u5206\",\"\u53d6\u6271\u65e5\u4ed8\",\"\u8d77\u7b97\u65e5\",\"\u304a\u652f\u6255\u91d1\u984d\",\"\u304a\u9810\u308a\u91d1\u984d\",\"\u53d6\u5f15\u533a\u5206\",\"\u6b8b\u9ad8\",\"\u6458\u8981\"\n</code></pre> <p>In English:</p> <pre><code>column_names = {\n    \"\u756a\u53f7\": \"Number\",\n    \"\u660e\u7d30\u533a\u5206\": \"Detail Classification\",\n    \"\u53d6\u6271\u65e5\u4ed8\": \"Handling Date\",\n    \"\u8d77\u7b97\u65e5\": \"Starting Date\",\n    \"\u304a\u652f\u6255\u91d1\u984d\": \"Debit\",\n    \"\u304a\u9810\u308a\u91d1\u984d\": \"Credit\",\n    \"\u53d6\u5f15\u533a\u5206\": \"Transaction Classification\",\n    \"\u6b8b\u9ad8\": \"Balance\",\n    \"\u6458\u8981\": \"Description\",\n}\n</code></pre> <p>Note on dates. On inspection of the CSV file, there are no year in dates, e.g. 4\u670830\u65e5. Thus, the tool uses the current year during conversion. So if you are converting data from last year, edit the generate bean file after conversion.</p>"},{"location":"institutions/ja_bank.html#regular-expressions","title":"Regular expressions","text":"<p>The following two columns are concatentated then passed to regular expressions for matching: <code>Transaction Classification</code> and <code>Description</code>.</p>"},{"location":"institutions/ja_bank.html#example-label-all-transactions-as-default","title":"Example: label all transactions as default","text":"<p>One of the automated tests does exactly this. Let's download and run it locally.</p> <pre><code>wget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/ja_bank/config.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/ja_bank/credit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/ja_bank/debit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/ja_bank/test.bean\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/ja_bank/test.csv\nbean-mt ja_bank config.toml test.csv --output out.bean\n</code></pre>"},{"location":"institutions/ja_bank.html#example-simple-account-labeling-using-regular-expressions","title":"Example: simple account labeling using regular expressions","text":"<p>This automated test does exactly this. Let's download and run it locally.</p> <pre><code>wget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data2/ja_bank/config.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data2/ja_bank/credit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data2/ja_bank/debit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data2/ja_bank/test.bean\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data2/ja_bank/test.csv\nbean-mt ja_bank config.toml test.csv --output out.bean\n</code></pre>"},{"location":"institutions/rakuten_bank.html","title":"Rakuten Bank \u697d\u5929\u9280\u884c","text":"<p>https://www.rakuten-bank.co.jp/</p>"},{"location":"institutions/rakuten_bank.html#how-to-download-transactions","title":"How to download transactions","text":"<p>TODO</p>"},{"location":"institutions/rakuten_bank.html#csv-file","title":"CSV file","text":"<p>Header row:</p> <pre><code>\u53d6\u5f15\u65e5,\u5165\u51fa\u91d1(\u5186),\u53d6\u5f15\u5f8c\u6b8b\u9ad8(\u5186),\u5165\u51fa\u91d1\u5185\u5bb9\n</code></pre>"},{"location":"institutions/rakuten_bank.html#regular-expressions","title":"Regular expressions","text":"<p>Regular expressions uses <code>\u5165\u51fa\u91d1\u5185\u5bb9</code> for matching.</p>"},{"location":"institutions/rakuten_bank.html#example-label-all-transactions-as-default","title":"Example: label all transactions as default","text":"<p>One of the automated tests does exactly this. Let's download and run it locally.</p> <pre><code>wget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/rakuten_bank/config.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/rakuten_bank/credit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/rakuten_bank/debit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/rakuten_bank/test.bean\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/rakuten_bank/test.csv\nbean-mt rakuten_bank config.toml test.csv --output out.bean\n</code></pre>"},{"location":"institutions/rakuten_card.html","title":"Rakuten Card \u697d\u5929\u30ab\u30fc\u30c9","text":"<p>https://www.rakuten-card.co.jp/</p>"},{"location":"institutions/rakuten_card.html#how-to-download-transactions","title":"How to download transactions","text":"<p>TODO</p>"},{"location":"institutions/rakuten_card.html#csv-file","title":"CSV file","text":"<p>Header row:</p> <pre><code>\"\u5229\u7528\u65e5\",\"\u5229\u7528\u5e97\u540d\u30fb\u5546\u54c1\u540d\",\"\u5229\u7528\u8005\",\"\u652f\u6255\u65b9\u6cd5\",\"\u5229\u7528\u91d1\u984d\",\"\u652f\u6255\u624b\u6570\u6599\",\"\u652f\u6255\u7dcf\u984d\",\"10\u6708\u652f\u6255\u91d1\u984d\",\"11\u6708\u7e70\u8d8a\u6b8b\u9ad8\",\"\u65b0\u898f\u30b5\u30a4\u30f3\"\n</code></pre>"},{"location":"institutions/rakuten_card.html#regular-expressions","title":"Regular expressions","text":"<p>Regular expressions uses <code>\u5229\u7528\u5e97\u540d\u30fb\u5546\u54c1\u540d</code> for matching.</p>"},{"location":"institutions/rakuten_card.html#example-label-all-transactions-as-default","title":"Example: label all transactions as default","text":"<p>One of the automated tests does exactly this. Let's download and run it locally.</p> <pre><code>wget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/rakuten_card/config.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/rakuten_card/credit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/rakuten_card/debit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/rakuten_card/test.bean\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/rakuten_card/test.csv\nbean-mt rakuten_card config.toml test.csv --output out.bean\n</code></pre>"},{"location":"institutions/shinsei_bank.html","title":"SBI Shinsei Bank SBI \u65b0\u751f\u9280\u884c","text":"<p>https://www.sbishinseibank.co.jp/</p>"},{"location":"institutions/shinsei_bank.html#how-to-download-transactions","title":"How to download transactions","text":"<p>TODO</p>"},{"location":"institutions/shinsei_bank.html#csv-file","title":"CSV file","text":"<p>The header row can be in English or in Japanese. Japanese header row:</p> <pre><code>\"\u53d6\u5f15\u65e5\",\"\u6458\u8981\",\"\u51fa\u91d1\u91d1\u984d\",\"\u5165\u91d1\u91d1\u984d\",\"\u6b8b\u9ad8\"\n</code></pre> <p>English header row:</p> <pre><code>\"Value Date\",\"Description\",\"Debit\",\"Credit\",\"Balance\"\n</code></pre>"},{"location":"institutions/shinsei_bank.html#regular-expressions","title":"Regular expressions","text":"<p>Regular expressions uses <code>\u6458\u8981</code> (or <code>Description</code>) for matching.</p>"},{"location":"institutions/shinsei_bank.html#on-sender-memo","title":"On sender memo","text":"<p>The raw CSV file does not contain the sender memo that one enters during outgoing money transfers. This info is recorded in the bank's PDF files, instead. My current workaround is manually copying that text from the PDF to the <code>\u6458\u8981</code> (or <code>Description</code>) column in the CSV.</p>"},{"location":"institutions/shinsei_bank.html#example-label-all-transactions-as-default","title":"Example: label all transactions as default","text":"<p>One of the automated tests does exactly this. Let's download and run it locally.</p> <pre><code>wget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/shinsei_bank/config.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/shinsei_bank/credit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/shinsei_bank/debit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/shinsei_bank/test.bean\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/shinsei_bank/test.csv\nbean-mt shinsei_bank config.toml test.csv --output out.bean\n</code></pre>"},{"location":"institutions/sumishin_net_bank.html","title":"SBI Sumishin Net Bank \u4f4f\u4fe1SBI\u30cd\u30c3\u30c8\u9280\u884c","text":"<p>https://www.netbk.co.jp/</p>"},{"location":"institutions/sumishin_net_bank.html#how-to-download-transactions","title":"How to download transactions","text":"<p>TODO</p>"},{"location":"institutions/sumishin_net_bank.html#csv-file","title":"CSV file","text":"<p>Header row:</p> <pre><code>\"\u65e5\u4ed8\",\"\u5185\u5bb9\",\"\u51fa\u91d1\u91d1\u984d(\u5186)\",\"\u5165\u91d1\u91d1\u984d(\u5186)\",\"\u6b8b\u9ad8(\u5186)\",\"\u30e1\u30e2\"\n</code></pre>"},{"location":"institutions/sumishin_net_bank.html#regular-expressions","title":"Regular expressions","text":"<p>The following two columns are concatentated then passed to regular expressions for matching: <code>\u5185\u5bb9</code> and <code>\u30e1\u30e2</code>.</p>"},{"location":"institutions/sumishin_net_bank.html#example-label-all-transactions-as-default","title":"Example: label all transactions as default","text":"<p>One of the automated tests does exactly this. Let's download and run it locally.</p> <pre><code>wget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/sumishin_net_bank/config.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/sumishin_net_bank/credit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/sumishin_net_bank/debit_mapping.toml\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/sumishin_net_bank/test.bean\nwget https://raw.githubusercontent.com/rlan/beancount-multitool/main/tests/data/sumishin_net_bank/test.csv\nbean-mt sumishin_net_bank config.toml test.csv --output out.bean\n</code></pre>"},{"location":"reference/changelog.html","title":"Changelog","text":"<p>0.7.1</p> <ul> <li>JA Bank transaction file does not contain a year. Read year from the configuration file instead of the current year.</li> <li>Fix warnings for missing links from mkdocs.</li> <li>Update developer section in the documentation.</li> </ul> <p>0.7.0</p> <ul> <li>Supports Chase Sapphire Preferred Card.</li> </ul> <p>0.6.1</p> <ul> <li>Typing errors in Python 3.9.</li> </ul> <p>0.6.0</p> <ul> <li>All currency values use decimal.Decimal.</li> <li>Handle Rakuten ETC card charges in Rakuten Card.</li> </ul> <p>0.5.0</p> <ul> <li>Add support for SBI Sumishin Net Bank.</li> </ul> <p>0.4.1</p> <ul> <li>Bug fix. Multiple account matches were not written to Beancount transactions.</li> </ul> <p>0.4.0</p> <ul> <li>Identify and label transactions to user-defined sub-accounts. Documentation is incoming.</li> <li>Breaking change: Structure of <code>config.toml</code> has changed.</li> </ul> <p>0.3.0</p> <ul> <li>Fix a hard-coded year bug in JABank.py.</li> <li>Add ruff. Run formatter and linter.</li> </ul> <p>0.2.1</p> <ul> <li>Update README for PyPi project page.</li> <li>Add sys.exit to calls of cli.py:main.</li> </ul> <p>0.2.0</p> <ul> <li>Show a list of supported financial institutions in --help.</li> </ul> <p>0.1.0</p> <ul> <li>Initial version.</li> </ul>"},{"location":"reference/data_model.html","title":"Data Model","text":""},{"location":"reference/data_model.html#beancount-transaction","title":"Beancount transaction","text":"<pre><code>classDiagram\n    class Transaction{\n        datetime date\n        str payee\n        str narration\n        list[str] tags\n        str source_account\n        str account\n        Decimal amount\n        str currency\n        str flag\n        dict metadata\n    }</code></pre>"},{"location":"reference/data_model.html#rakuten-bank","title":"Rakuten Bank","text":"<p>CSV header row:</p> <pre><code>\u53d6\u5f15\u65e5,\u5165\u51fa\u91d1(\u5186),\u53d6\u5f15\u5f8c\u6b8b\u9ad8(\u5186),\u5165\u51fa\u91d1\u5185\u5bb9\n</code></pre> <p>In English:</p> <pre><code>date,amount,description,balance\n</code></pre> <pre><code>classDiagram\n    class RakutenBank{\n        datetime date\n        int amount\n        str description\n        int balance\n    }\n\n    class Beancount{\n        str source_account\n        str currency\n    }\n\n    class Mapping{\n        str regexp\n        str account\n        str payee\n        str narration\n        list[str] tags\n        str flag\n    }</code></pre>"},{"location":"reference/development.html","title":"Development","text":"<p>Instructions for developers.</p>"},{"location":"reference/development.html#on-macos","title":"On macOS","text":"<p>Install</p> <ul> <li> <p>Homebrew</p> </li> <li> <p>pyenv and pyenv-virtualenv</p> <pre><code>brew install pyenv pyenv-virtualenv\n</code></pre> </li> <li> <p>pipx</p> <pre><code>brew install pipx\n</code></pre> </li> <li> <p>Poetry</p> <pre><code>pipx install poetry\n</code></pre> </li> <li> <p>ruff</p> <pre><code>brew install ruff\n</code></pre> </li> </ul> <p>Similar to this setup, but no tox and uses ruff.</p>"},{"location":"reference/development.html#procedure","title":"Procedure","text":"<p>Get repo:</p> <pre><code>git clone\n</code></pre> <p>Install development environment:</p> <pre><code>poetry install\n</code></pre> <p>Launch virtualenv:</p> <pre><code>poetry shell\n</code></pre> <p>Code formatting:</p> <pre><code>poetry run ruff format\n</code></pre> <p>Linter:</p> <pre><code>poetry run ruff check\n</code></pre> <p>Test with coverage:</p> <pre><code>pytest --cov --cov-report term\n</code></pre> <p>Build documentation:</p> <pre><code>mkdocs build\n</code></pre>"},{"location":"reference/development.html#pypi-publish-checklist","title":"PyPi publish checklist","text":"<p>Ref: Digital Ocean</p> <ul> <li> Bump version</li> <li> <code>pyproject.toml</code></li> <li> <code>src/beancount_multitool/__version__.py</code></li> <li> Update changelog in the documentation.</li> <li> Run local tests and coverage.</li> <li> Update coverage number in project <code>README.md</code>.</li> <li> Update documentation, if necessary<ul> <li> Build documentation and check for warnings and errors.</li> </ul> </li> <li> <code>git commit</code> and <code>git push</code>.</li> <li> Check that tests and deploy docs actions succeeded on GitHub Action.</li> <li> Tag the new version: <code>git tag -a v0.5.0 -m \"v0.5.0\"</code></li> <li> <code>poetry build</code></li> <li> <code>poetry publish</code></li> </ul>"},{"location":"reference/new_importer.html","title":"How create a new importer?","text":"<p>In short, read the existing code for inspiration. TODO: add more details.</p>"},{"location":"reference/todo.html","title":"Todo","text":"<ul> <li> Check for malformed TOML files.</li> <li> Identify and label transactions to user-defined sub-accounts.<ul> <li> Update docs.</li> </ul> </li> <li> Usage documentation.<ul> <li> basic</li> </ul> </li> <li> Make <code>bean-mt</code>: a cli program.</li> <li> Use pytest.</li> <li> Add coverage to pytest.<ul> <li>https://stackoverflow.com/a/65697914</li> </ul> </li> <li> Location of default config toml</li> <li> Static coverage number.</li> <li> poetry, pytest using GitHub actions.</li> <li> Control number of significant digits printed for <code>amount</code> in <code>as_transaction()</code>.</li> <li> Code coverage using GitHub actions.<ul> <li>https://github.com/marketplace/actions/pytest-coverage-comment</li> </ul> </li> <li> Add contribution guidelines.</li> <li> Documentation on how to obtain CSV files from the supported financial institution.</li> </ul>"},{"location":"usage/index.html","title":"Workflow","text":"<p>A typical workflow using the CLI tool with a Beancount ledger:</p> <ol> <li>Download the raw CSV file from a financial institution.</li> <li>Run <code>bean-mt</code> CLI tool on the CSV file.</li> <li>Inspect the resulting <code>output.bean</code> file for uncategorized transactions.</li> <li>Edit configurations (i.e. regular expressions and etc) and repeat previous step.</li> <li>Include <code>output.bean</code> in the Beancount ledger.</li> </ol>"},{"location":"usage/index.html#what-to-do-next","title":"What to do next?","text":"<ul> <li>For quick start, choose one of the financial institutions. Then modify the label-all-as-default example to match your Beacount ledger accounts.</li> <li>For a simple example of using regular expression to label accounts, see the regular expression example for JA Bank.</li> <li>For developers, see here.</li> <li>Learn about configurations of <code>bean-mt</code> CLI tool.</li> <li>Here are some examples of common usage.</li> </ul>"},{"location":"usage/configs.html","title":"Configurations","text":"<p>TODO</p> <ul> <li>System diagram.</li> <li>Explain modules.</li> <li>Explain config files.</li> </ul>"},{"location":"usage/examples.html","title":"Examples","text":"<p>Here are some examples.</p>"},{"location":"usage/examples.html#default-accounts","title":"Default accounts","text":"<p>TODO</p> <ul> <li>How to change default account.</li> </ul>"},{"location":"usage/examples.html#recurring","title":"Recurring","text":"<p>TODO</p> <ul> <li>What is a mapping.</li> <li>How to add more mappings?</li> <li>Does not support split transactions.</li> </ul>"},{"location":"usage/examples.html#money-transfers","title":"Money transfers","text":"<p>TODO</p>"},{"location":"usage/tags.html","title":"Tags","text":"<p>A generic Beancount transaction looks like this:</p> <pre><code>{date} * \"{payee}\" \"{narration}\" {\" \".join({tags})}\n  for key, value in {metadata}:  # aka transaction metadata\n    {key}: \"{value}\"\n  {source_account}\n  {flag}{account}  {amount} {currency}\n    for key, value in {account_metadata}:  # aka account metadata\n      {key}: \"{value}\"\n</code></pre> <p>Tags are user input. Here we define a list of reserved words for tags that injects additional metadata.</p> <ul> <li> <p><code>#reconcile</code></p> <ul> <li>Adds a (random) uuid string to a <code>uuid</code> key to transaction metadata of a debit transaction (amount is negative). Example:</li> </ul> <pre><code>uuid: \"603cd901-a734-45d0-a100-dc01c22b5b4b\"\n</code></pre> <ul> <li>Adds a empty string to a <code>uuid</code> key to transaction metadata of a credit transaction (amount is positive). Example:</li> </ul> <pre><code>uuid: \"\"\n</code></pre> <p>This is to reconcile duplicate transactions for a money transfer between two accounts. My personal convention is to keep the debit one, copy the UUID, paste the UUID to the credit one and comment the credit one.</p> </li> </ul>"}]}